***********************************
:mod:`ina219` --- Digital wattmeter
***********************************
.. module:: ina219
   :synopsis: Digital wattmeter

.. _ina219:


The INA219 is a digital wattmeter

.. note::
    This section is under development and is not complete nor accurate

Class INA219
============

Example Usage::

    # Find any INA219 sensors and display its data
    import time
    from machine import SoftI2C, Pin

    valid_adx = [0x40, 0x41, 0x44, 0x45] # The range of valid INA219 I2C addresses
    i2c_bus = SoftI2C(scl=Pin('P3A')',sda=Pin('P3B'))
    sensors = i2c_bus.scan() # Search the I2C bus for devices
    found = False
    for adx in sensors:
        if adx in valid_adx: 
            ina219 = INA219(i2c_bus, addr=adx)  # Note it will use the last sensor found
            found = True
            print('Found INA219 at ', hex(adx))

    if not found: 
        print('No x INA219')    # Edit this line
        raise SystemExit

    # measure and display loop
    while True: # the loop runs forever
        bus_voltage = ina219.bus_voltage  # voltage on V- (load side)
        shunt_voltage = ina219.shunt_voltage  # voltage between V+ and V- across the shunt

        # INA219 measure bus voltage on the load side. So PSU voltage = bus_voltage + shunt_voltage
        print("PSU V:{:6.3f} V".format(bus_voltage + shunt_voltage))
        print("Shunt V:{:9.6f} V".format(shunt_voltage))
        print("Load V:{:6.3f} V".format(bus_voltage))
        print("Current:{:9.6f} mA".format(ina219.current * 1000))
        print("Power:{:9.6f} mW".format(ina219.power * 1000))
        print("")

        time.sleep(5)




INA219 Constructor
------------------

.. class:: ina219.INA219(i2c_device, addr=0x40, rshunt = 0.01, maxamps = 1)


    

INA219 Methods
--------------


.. method:: INA219.method()
    

